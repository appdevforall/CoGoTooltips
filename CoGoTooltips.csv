tag^category^summary^detail^buttonDescr1^buttonURI1^buttonDescr2^buttonURI2^buttonDescr3^buttonURI3
1^ide^Code on the Go is an integrated development environment (IDE) to build Android apps that runs on Android phones and doesn't need a connection to the Internet.^If you already know how to code using Java or Kotlin, Code on the Go lets  you develop and compile Android apps without requiring you to go online.  Our goal is to make computer science education and programming resources globally available.^Learn more about Code on the Go^getstarted_top.html^^^^
100^ide^Create a new empty project or use a template.^When you start a new project, Code on the Go creates the right structure for your files. To get started quickly, you can begin a new project using a template that contains starter code and features for a specific kind of app.^Learn more about projects^projects_top.html^Learn more about templates^templates_top.html^^
110^ide^Open a saved project.^To open a saved project, follow these steps:<ol><li>Tap <b>Open an existing project</b>. A list of folders and projects on your device will be displayed. <li>Navigate to the location of the project you want to open. <li>Tap the project name. Code on the Go will open the project. This may take a few minutes. <li>When <b>Project initialized</b> is displayed at the bottom of the screen, you can begin work on the saved project.</ol>^Learn more about projects^projects_top.html^^^^
170^ide^When you delete a project, the project directory and all of the files are removed. Deleting a project is permanent and a deleted project can’t be restored.`^To delete a saved project, follow these steps:<ol><li>Tap <b>Delete a saved project</b>. A list of folders and projects on your device will be displayed. <li>Navigate to the location of the project you want to delete. <li>Tap the project name. A confirmation window will be be displayed. <li>Click <b>Yes, Delete</b>. All files and directories associated with the project will be deleted.^Learn more about projects^projects_top.html^^^^
160^ide^Code on the Go delivers multiple levels of help. To see more information about a topic, tap the button below. ^To display a help for an item, long-press the item. To view more information, click the button below the tooltip. To learn more about the topic, click one of the buttons below. ^Explore Code on the Go documentation^cogohelp/index.html^^^^
import^java^<code>import</code> declares a Java class to use in the code below the import statement.^After a Java class is declared, the class name can be used in the code without specifying the package that the class belongs to.^Learn more about <code>import</code> and other Java keywords^java_keywords.html#import^^^^
class^java^A <code>class</code> definition contains its objects’ data and behavior. A defined class acts as a template to create individual objects or instances of the class.^A class definition contains variables that store the object’s information and methods that process the information.^Learn more about <code>class</code> and other Java keywords^java_keywords.html#class^^^^
extend^java^Used in a class declaration to specify the superclass or in an interface declaration to specify one or more superinterfaces.^Class X extends class Y to add functionality by adding fields or methods to class Y, or by overriding methods of class Y.When used in an interface declaration, an interface Z extends one or more interfaces by adding methods. Z is said to be a subinterface of the interfaces it extends.Also used to specify an upper bound on a type parameter in Generics.^Learn more about <code>extend</code> and other Java keywords^java_keywords.html#extend^^^^
200^ide^Create a new empty project or use a template.^When you start a new project, Code on the Go creates the right structure for your files. To get started quickly, you can begin a new project using a template that contains starter code and features for a specific kind of app.^Learn more about projects^projects_top.html^Learn more about templates^templates_top.html^Learn about the Android lifecycle^lifecycle_top.html
abstract^java^A method with no definition must be declared as <code>abstract</code> and the class containing it must be declared as <code>abstract</code>.^Abstract classes cannot be instantiated. <br>Abstract methods must be implemented in the subclasses.<br>Abstract cannot be used with variables or constructors. Note: An abstract class is not required to have an abstract method.^Learn more about <code>abstract</code> and other Java keywords^java_keywords.html#abstract^^^^
boolean^java^"Defines a boolean variable for the values ""true"" or ""false"" only."^By default, the value of the boolean primitive type is false. This keyword is also used to declare that a method returns a value of the primitive type boolean.^Learn more about <code>boolean</code> and other Java keywords^java_keywords.html#boolean^^^^
break^java^Ends the execution in the current loop body or breaks out of a switch block^"For loop example: This code loops through an array and prints each element. When it encounters the value 5, the loop terminates and does not print this value.<pre>// Prints:
// 1
// 2
int[] arr = {1, 2, 5, 10};
for (int k = 0; k < arr.length; k++) {
	if (arr[k] == 5) {
		break;
	}
	System.out.println(arr[k]);
}</pre>"^Learn more about <code>break</code> and other Java keywords^java_keywords.html#break^^^^
byte^java^Declares a field that can hold an 8-bit signed two's complement integer. ^The <code>byte</code> keyword is used to declare a field that can hold an 8-bit signed two's complement integer. This keyword is also used to declare that a method returns a value of the primitive type byte.Can take on integer values from <b>-128</b> to <b>127</b>.^Learn more about <code>byte</code> and other Java keywords^java_keywords.html#byte^^^^
case^java^In a switch block, the <code>switch</code> statement evaluates its expression, then executes all statements that follow the matching <code>case</code> label.^A statement in the switch block can be labeled with one or more case or default labels. The switch statement evaluates its expression, then executes all statements that follow the matching case label.^Learn more about <code>case</code> and other Java keywords^java_keywords.html#case^^^^
catch^java^Used in conjunction with a try block.  Statements in the catch block specify what to do when the try block throws a specific type of exception.^Used in conjunction with a try block and an optional finally block. The statements in the catch block specify what to do if the try block throws a specific type of exception.^Learn more about <code>catch</code> and other Java keywords^java_keywords.html#catch^^^^
char^java^Defines a 16-bit Unicode character variable.^ The variable that can hold any character of the Java source file's character set. ^Learn more about <code>char</code> and other Java keywords^java_keywords.html#char^^^^
continue^java^Resumes program execution at the end of the current loop body^If followed by a label, continue resumes execution at the end of the enclosing labeled loop body.^Learn more about <code>continue</code> and other Java keywords^java_keywords.html#continue^^^^
default^java^The <code>default</code> keyword can optionally be used in a switch statement to label a block of statements to be executed if no case matches the specified value.^See <code>switch</code>. Alternatively, the default keyword can also be used to declare default values in a Java annotation. From Java 8 onwards, the default keyword can be used to allow an interface to provide an implementation of a method.^Learn more about <code>default</code> and other Java keywords^java_keywords.html#default^^^^
do^java^Used in conjunction with while to create a do-while loop, which executes a block of statements associated with the loop and then tests a boolean expression associated with the while.^If the expression evaluates to true, the block is executed again; this continues until the expression evaluates to false^Learn more about <code>do</code> and other Java keywords^java_keywords.html#do^^^^
double^java^Use to declare a variable that can hold a 64-bit double precision IEEE 754 floating-point number. ^This keyword is also used to declare that a method returns a value of the primitive type double. Can take on double precision values from -1.79769313486231570e+308 to +1.79769313486231570e+308^Learn more about <code>double</code> and other Java keywords^java_keywords.html#double^^^^
else^java^Used in conjunction with if to create an if-else statement that tests a Boolean expression.^If the expression evaluates to <code>true</code>, the block of statements associated with the <code>if</code> are evaluated. If it evaluates to <code>false</code>, the block of statements associated with the <code>else</code> are evaluated.^Learn more about <code>else</code> and other Java keywords^java_keywords.html#else^^^^
enum^java^Used to declare an enumerated type.^Enumerations extend the base class Enum.^Learn more about <code>enum</code> and other Java keywords^java_keywords.html#enum^^^^
extends^java^Used in a class declaration to specify the superclass or in an interface declaration to specify one or more superinterfaces^Class X extends class Y to add functionality by adding fields or methods to class Y or by overriding methods of class Y. When used in an interface declaration, an interface Z extends one or more interfaces by adding methods. Z is said to be a subinterface of the interfaces it extends. Also used to specify an upper bound on a type parameter in Generics (elements that are not classes and can't be further expanded). ^Learn more about <code>extends</code> and other Java keywords^java_keywords.html#extends^^^^
final^java^Used to define an entity once that cannot later be changed nor derived from.^A final class cannot be subclassed. A final method cannot be overridden. A final variable can occur at most once as a left-hand expression on an executed command. All methods in a final class are implicitly <code>final</code>.^Learn more about <code>final</code> and other Java keywords^java_keywords.html#final^^^^
finally^java^ Used to define a block of statements for a block defined previously by the <code>try</code> keyword.^The finally block is executed after execution exits the <code>try</code> block and any associated catch clauses regardless of whether an exception was thrown or caught, or execution left method in the middle of the try or catch blocks using the <code>return</code> keyword.^Learn more about <code>finally</code> and other Java keywords^java_keywords.html#finally^^^^
float^java^Used to declare a variable that can hold a 32-bit single precision IEEE 754 floating-point number.^This keyword is also used to declare that a method returns a value of the primitive type float. Can take single-precision values from <b>-3.40292347e+38</b> to <b>3.40292347e+38 </b>^Learn more about <code>float</code> and other Java keywords^java_keywords.html#float^^^^
for^java^Used to create a <code>for</code> loop, which specifies a variable initialization a boolean expression, and an incrementation.^The variable initialization is performed first, and then the Boolean expression is evaluated. If the expression evaluates to true, the block of statements associated with the loop are executed and then the incrementation is performed. The Boolean expression is then evaluated again; this continues until the expression evaluates to <code>false</code>.^Learn more about <code>for</code> and other Java keywords^java_keywords.html#for^^^^
if^java^Used to create an <code>if</code> statement that tests a Boolean expression.^If the expression evaluates to <code>true</code>, the block of statements associated with the if statement is executed. This keyword can also be used to create an <code>if-else</code> statement. ^Learn more about <code>if</code> and other Java keywords^java_keywords.html#if^^^^
implements^java^Included in a class declaration to specify one or more interfaces that are implemented by the current class.^A class inherits the types and abstract methods declared by the interfaces.^Learn more about <code>implements</code> and other Java keywords^java_keywords.html#implements^^^^
import^java^Used to create an <code>if</code> statement that tests a Boolean expression. ^If the expression evaluates to <code>true</code>, the block of statements associated with the <code>if</code> statement is executed. This keyword can also be used to create an <code>if-else</code> statement.^Learn more about <code>import</code> and other Java keywords^java_keywords.html#import^^^^
instanceof^java^Used to check if the runtime type of an object is assignment-compatible with a particular class or interface.^code>instanceof</code> takes an object reference as its first operand, takes class or interface as its second operand, and produces a Boolean result. ^Learn more about <code>instanceof</code> and other Java keywords^java_keywords.html#instanceof^^^^
int^java^Used to declare a variable that can hold a 32-bit signed two's complement integer.^This keyword is also used to declare that a method returns a value of the primitive type int.   ^Learn more about <code>int</code> and other Java keywords^java_keywords.html#int^^^^
interface^java^Used to declare a special type of class that only contains abstract or default methods, constant (<code>static final</code>) fields, and <code>static</code> interfaces. ^It can later be implemented by classes that declare the interface with the implements keyword. As multiple inheritance is not allowed in Java, interfaces are used to circumvent this limitationit. An interface can be defined within another interface.^Learn more about <code>interface</code> and other Java keywords^java_keywords.html#interface^^^^
long^java^The long keyword is used to declare a variable that can hold a 64-bit signed two's complement integer. ^This keyword is also used to declare that a method returns a value of the primitive type <code>long</code>. Can take on values from<b> -263</b> to <b>263 - 1</b>^Learn more about <code>long</code> and other Java keywords^java_keywords.html#long^^^^
native^java^Used in method declarations to specify that the method is not implemented in the same Java source file but in another language.^^Learn more about <code>native</code> and other Java keywords^java_keywords.html#native^^^^
new^java^Used to create an instance of a class or array object.  ^  ^Learn more about <code>new</code> and other Java keywords^java_keywords.html#new^^^^
package^java^A package contains inter-related classes. ^All classes must belong to a package. Java places classes without a package statement into an unnamed default package.^Learn more about <code>package</code> and other Java keywords^java_keywords.html#package^^^^
private^java^Used in the declaration of a method, field, or inner class. ^Private members can only be accessed by other members of their own class.^Learn more about <code>private</code> and other Java keywords^java_keywords.html#private^^^^
protected^java^Used in the declaration of a method, field, or inner class.^Protected members can only be accessed by members of their own class, that class's subclasses, or classes from the same package.^Learn more about <code>protected</code> and other Java keywords^java_keywords.html#protected^^^^
public^java^Used in the declaration of a class, method, or field.^Public classes, methods, and fields can be accessed by the members of any class.^Learn more about <code>public</code> and other Java keywords^java_keywords.html#public^^^^
return^java^ Used to fnish the execution of a method.^ The keyword can be followed by a value required by the method definition that is returned to the caller.^Learn more about <code>return</code> and other Java keywords^java_keywords.html#return^^^^
short^java^Used to declare a field that can hold a 16-bit signed two's complement integer.^This keyword is also used to declare that a method returns a value of the primitive type <code>short</code>.     Can take on values from <b>X</b> to <b>Y</b>^Learn more about <code>short</code> and other Java keywords^java_keywords.html#short^^^^
static^java^ Used to declare a field, method, or inner class as a class field.^Classes maintain one copy of class fields regardless of how many instances exist of that class. <code>static</code> also is used to define a method as a class method. Class methods are bound to the class instead of to a specific instance, and can only operate on class fields. Classes and interfaces declared as <code>static</code> members of another class or interface are behaviorally top-level classes.^Learn more about <code>static</code> and other Java keywords^java_keywords.html#static^^^^
super^java^Inheritance specifier used to achieve dynamic binding or run-time polymorphism in Java.^Used to access members of a class inherited by the class in which it appears. Allows a subclass to access overridden methods and hidden members of its superclass. The <code>super</code> keyword is also used to forward a call from a constructor to a constructor in the superclass. Also used to specify a lower bound on a type parameter in Generics.^Learn more about <code>do</code> and other Java keywords^java_keywords.html#super^^^^
switch^java^Used in conjunction with <code>case</code> and <code>default</code> to create a switch statement. ^The switch statement evaluates a variable, matches its value to a specific <code>case</code>, and executes the block of statements associated with that <code>case</code>. If no <code>case</code> matches the value, the optional block labeled by <code>default</code> is executed if it is included. ^Learn more about <code>switch</code> and other Java keywords^java_keywords.html#switch^^^^
synchronized^java^Used in the declaration of a method or code block to acquire the mutex lock for an object while the current thread executes the code. ^For static methods, the object locked is the class's <code>Class</code>. Guarantees that at most one thread at a time operating on the same object executes that code. The mutex lock is automatically released when execution exits the synchronized code. Fields, classes and interfaces cannot be declared as <code>synchronized</code>.^Learn more about <code>synchronized</code> and other Java keywords^java_keywords.html#synchronized^^^^
this^java^Used to represent an instance of the class in which it appears.^The keyword <code>this</code> can be used to access class members and as a reference to the current instance. The keyword is also used to forward a call from one construct in a class to another constructor in the same class. ^Learn more about <code>this</code> and other Java keywords^java_keywords.html#this^^^^
throw^java^Causes the declared exception instance to be thrown.^This causes execution to continue with the first enclosing exception handler declared by the <code>catch</code> keyword to handle an assignment compatible exception type. If no such exception handler is found in the current method, then the method returns and the process is repeated in the calling method. If no exception handler is found in any method call on the stack, then the exception is passed to the thread's uncaught exception handler.^Learn more about <code>throw</code> and other Java keywords^java_keywords.html#throw^^^^
throws^java^Used in method declarations to specify which exceptions are not handled within the method but rather passed to the next higher level of the program.^All uncaught exceptions in a method that are not instances of <code>RuntimeException</code> must be declared using the <code>throws</code> keyword.^Learn more about <code>throws</code> and other Java keywords^java_keywords.html#throws^^^^
transient^java^Declares that an instance field is not part of the default serialized form of an object. ^When an object is serialized, only the values of its non-transient instance fields are included in the default serial representation. When an object is deserialized, transient fields are initialized only to their default value. If the default form is not used, e.g. when a <i>serialPersistentFields</i> table is declared in the class hierarchy, all <code>transient</code> keywords are ignored.^Learn more about <code>transient</code> and other Java keywords^java_keywords.html#transient^^^^
try^java^Defines a block of statements that have exception handling.^Also, an optional finally block can be declared that will be executed when execution exits the <code>try</code> block and <code>catch</code> clauses, regardless of whether an exception is thrown or not. A try block must have at least one <code>catch</code> clause or a <code>finally</code> block.^Learn more about <code>do</code> and other Java keywords^java_keywords.html#try^^^^
void^java^Used to declare that a method does not return any value.^^Learn more about <code>void</code> and other Java keywords^java_keywords.html#void^^^^
volatile^java^Used in field declarations to guarantee visibility of changes to variables across threads.^Every read of a volatile variable will be read from main memory, and not from the CPU cache, and that every write to a volatile variable will be written to main memory, and not just to the CPU cache. Methods, classes and interfaces thus cannot be declared volatile, nor can local variables or parameters.^Learn more about <code>volatile</code> and other Java keywords^java_keywords.html#volatile^^^^
while^java^Used to create a while loop, which tests a Boolean expression and executes the block of statements associated with the loop if the expression evaluates to <code>true</code>. ^This continues until the expression evaluates to <code>false</code>. This keyword can also be used to create a do-while loop,^Learn more about <code>while</code> and other Java keywords^java_keywords.html#while^^^^
as^kotlin^Used for type casts or to specify an alias for an import.^<ul><li>In type casting: To explicitly cast an object to a non-nullable type, use the unsafe cast operator. If the cast isn't possible, the compiler throws an exception. <li>In imports: Apart from the default imports, any file may contain its own import directives. If there is a name clash, you can disambiguate by using the as keyword to locally rename the clashing entity. </ul>^Learn more about the <code>as</code> operator in type casting ^https://kotlinlang.org/docs/typecasts.html#unsafe-cast-operator^Learn more about the use of as to disambiguate imports ^https://kotlinlang.org/docs/packages.html#imports^^
as?^kotlin^Used for safe type casts.^To avoid exceptions, use the safe cast operator <code>as?</code>, which returns null on failure.^Learn more about safe type casting^https://kotlinlang.org/docs/typecasts.html#safe-nullable-cast-operator^^^^
break^kotlin^Terminates the execution of the nearest enclosing a loop^^Learn more about <code>break</code> and <code>continue</code> labels ^https://kotlinlang.org/docs/returns.html#break-and-continue-labels^^^^
class^kotlin^Declares a class.^The <code>class</code> declaration consists of the class name, the class header (specifying its type parameters, the primary constructor, and some other things), and the class body surrounded by curly braces. Both the header and the body are optional; if the class has no body, the curly braces can be omitted.^Learn more about classes^https://kotlinlang.org/docs/classes.html^^^^
continue^kotlin^Proceeds to the next step of the nearest enclosing loop.^^Learn more about <code>break</code> and <code>continue</code> labels ^https://kotlinlang.org/docs/returns.html#break-and-continue-labels^^^^
do^kotlin^Begins a <code>doop-while</code> loop (a loop with a postcondition).^<code>do-while</code> processes the body and then checks the condition. If the condition is satisfied, the loop repeats. As a result, the body of <code>do-while</code> runs at least once regardless of the condition.^Learn more about <code>while</code> loops^https://kotlinlang.org/docs/control-flow.html#while-loops^^^^
else^kotlin^Defines the branch of an <code>if</code> expression that is executed when the condition is false.^^Learn more about <code>if</code> conditions^https://kotlinlang.org/docs/control-flow.html#if-expression^^^^
FALSE^kotlin^Specifies the 'false' value of the Boolean type.^The type Boolean represents boolean objects that can have two values: true and false. Boolean has a nullable counterpart declared as Boolean.^Learn more about Booleans^https://kotlinlang.org/docs/booleans.html^^^^
for^kotlin^Begins a <code>for</code> loop that iterates through anything that provides an iterator.^"This is equivalent to the <code>foreach</code> loop in languages like C#. <br> <code>for</code) has a member or an extension function <code>iterator()</code> that returns <code>Iterator<>></code>, which:<ul><li>has a member or an extension function<code>next()</code><li>has a member or an extension function <code>hasNext()</code> that returns <code>Boolean</code>.</ul>All  three functions must be marked as <code>operator</code>.
"^Learn more about <code>for</code> loops^https://kotlinlang.org/docs/control-flow.html#for-loops^^^^
fun^kotlin^Declares a function.^^Learn more about functions^https://kotlinlang.org/docs/functions.html^^^^
if^kotlin^Begins an <code>if</code> expression that returns a value.^^Learn more about <code>if</code> expressions^https://kotlinlang.org/docs/control-flow.html#if-expression^^^^
in^kotlin^This keyword has multiple uses. ^The <code>in</code> keyword can:<ul><li<Specify the object being iterated in a <code>for</code> loop.<li>Serve as an infix operator to check that a value belongs to a range, a collection, or another entity that defines a 'contains' method. <li>Be used in when expressions for the same purpose. <li>Mark a type parameter as contravariant.</ul>^Learn more about flow contol including <code>for</code> loops and <code>when</code> statements^https://kotlinlang.org/docs/control-flow.html^Learn about contravariance and other Generics concepts^https://kotlinlang.org/docs/generics.html#declaration-site-variance^^
!in^kotlin^<code>!in</code> is used as an operator to check that a value does NOT belong to a range, a collection, or another entity that defines a 'contains' method.^It is also used in <code>when</code>expressions for the same purpose.^Learn more about the <code>in</code> operator^https://kotlinlang.org/docs/operator-overloading.html#in-operator^Learn more about when statements^https://kotlinlang.org/docs/control-flow.html#when-expressions-and-statements^^
interface^kotlin^Interfaces can contain declarations of abstract methods and method implementations. ^Interfaces are different from abstract classes because interfaces cannot store state. Interfaces can have properties, but the properties must be abstract or provide accessor implementations.^Learn more about interfaces^https://kotlinlang.org/docs/interfaces.html^^^^
is^kotlin^Checks that a value has a certain type. ^It is also used in <code>when</code> expressions for the same purpose.^Learn more about  <code>is</code> and <code>!is</code> operators^https://kotlinlang.org/docs/typecasts.html#is-and-is-operators^^^^
!is^kotlin^Checks that a value does NOT have a certain type. It is also used in when expressions for the same purpose.^It is also used in <code>when</code> expressions for the same purpose.^Learn more about  <code>is</code> and <code>!is</code> operators^https://kotlinlang.org/docs/typecasts.html#is-and-is-operators^^^^
null^kotlin^A constant representing an object reference that doesn't point to any object.^^Learn more about objects^https://kotlinlang.org/docs/object-declarations.html^^^^
object^kotlin^Declares a class and its instance at the same time.^Objects allow you to define a class and create an instance of it in a single step. This is useful when you need either a reusable singleton instance or a one-time object. Kotlin provides two key approaches to these scenarios: Object declarations for creating singletons and object expressions for creating anonymous one-time objects. ^Learn more about object declarations^https://kotlinlang.org/docs/object-declarations.html^^^^
package^kotlin^Specifies the package for the current file.^If the package is not specified, the contents of such a file belong to the default package with no name.^Learn more about packages and imports^https://kotlinlang.org/docs/packages.html^^^^
return^kotlin^Returns from the nearest enclosing function or anonymous function.^Functions can be nested using function literals, local functions, and object expressions. A qualified return allows you to return from an outer function. ^Learn more about returns and jumps^https://kotlinlang.org/docs/returns.html#return-to-labels^^^^
super^kotlin^Refers to the superclass implementation of a method or property, or calls the superclass constructor from a secondary constructor.^Code in a derived class can call its superclass functions and property accessor implementations using the super keyword. <br>Inside an inner class, accessing the superclass of the outer class uses the super keyword qualified with the outer class name: <code>super@Outer/</code> ^Learn more about inheritance^https://kotlinlang.org/docs/classes.html#inheritance^Learn more about nested and inner classes^https://kotlinlang.org/docs/nested-classes.html ^Learn more about superclasses^https://kotlinlang.org/docs/inheritance.html#calling-the-superclass-implementation
this^kotlin^Refers to the current receiver, or calls another constructor of the same class from a secondary constructor.^In a member of a class, <code>this</code> refers to the current object of that class.<br>In an extension function or a function literal with receiver, <code>this</code> denotes the receiver parameter that is passed on the left-hand side of a dot.<br>If <code>this</code> has no qualifiers, it refers to the innermost enclosing scope.^Learn more about <code>this</code> statements^https://kotlinlang.org/docs/this-expressions.html^Learn more about constructors^https://kotlinlang.org/docs/classes.html#constructors^^
throw^kotlin^Throws an exception.^Throwing an exception indicates that an unexpected runtime error has occurred in the code. Exceptions are objects, and throwing one creates an instance of an exception class. ^Learn more about exceptions^https://kotlinlang.org/docs/exceptions.html^^^^
TRUE^kotlin^Specifies the true value of the Boolean type.^The type Boolean represents boolean objects that can have two values: true and false.^Learn more about Booleans^https://kotlinlang.org/docs/booleans.html^^^^
try^kotlin^Begins an exception-handling block.^The <code>try</code> and <code>catch</code> keywords help keep your program stable. The <code>try</code> block contains the code that might throw an exception, while the <code>catch</code> block catches and handles the exception if it occurs. The exception is caught by the first <code>catch</code> block that matches its specific type or a superclass of the exception.^Learn more about exceptions^https://kotlinlang.org/docs/exceptions.html^^^^
typealias^kotlin^Declares a type alias.^Type aliases provide alternative names for existing types. If the type name is long, you can introduce a different shorter name and use the new one instead. Type aliases do not introduce new types. They are equivalent to the corresponding underlying types.^Learn more about type aliases^https://kotlinlang.org/docs/type-aliases.html^^^^
typeof^kotlin^Reserved for future use.^^^^^^^
val^kotlin^Declares a read-only property or local variable.^^Learn more about properties^https://kotlinlang.org/docs/properties.html^Learn more about variables^https://kotlinlang.org/docs/basic-syntax.html#variables^^
var^kotlin^Declares a mutable property or local variable.^^Learn more about properties^https://kotlinlang.org/docs/properties.html^Learn more about variables^https://kotlinlang.org/docs/basic-syntax.html#variables^^
when^kotlin^Begins a <code>when</code> expression (executes one of the given branches).^<code>when</code> is a conditional expression that runs code based on multiple possible values or conditions. when matches its argument against all branches sequentially until some branch condition is satisfied.^Learn more about <code>when</code> expressions^https://kotlinlang.org/docs/control-flow.html#when-expressions-and-statements^^^^
while^kotlin^Begins a <code>while</code> loop (a loop with a precondition).^<code>while<c/ode> checks the condition. If the condition is satisfied, <code>while</code><code>processes the body and then returns to the condition check.^Learn more about <code>while</code> loops^https://kotlinlang.org/docs/control-flow.html#while-loops^^^^
by^kotlin^Delegates the implementation of an interface to another object, or delegates the implementation of the accessors for a property to another object.^^Learn more about delegation in interface implementation  ^https://kotlinlang.org/docs/delegation.html^Learn more about access implementation^https://kotlinlang.org/docs/delegated-properties.html^^
catch^kotlin^Begins a block that handles a specific exception type^Catching exceptions manually handles an unexpected exception by resolving the issue or notifying the developer or application user.^Learn more about exception^https://kotlinlang.org/docs/exceptions.html^^^^
constructor^kotlin^Declares a primary or secondary constructor ^A class in Kotlin has a primary constructor and possibly one or more secondary constructors. The primary constructor is declared in the class header, and it goes after the class name and optional type parameters.^Learn more about constructors in classes^https://kotlinlang.org/docs/classes.html#constructors^Learn more about constructors in annotations ^https://kotlinlang.org/docs/annotations.html#constructors^^
dynamic^kotlin^References a dynamic type in Kotlin and JavaScript.^^Learn more about the dynamic type^https://kotlinlang.org/docs/dynamic-type.html^^^^
field^kotlin^Is used as an annotation use-site target.^^Learn more about annotation use-site targets^https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets ^^^^
file^kotlin^Is used as an annotation use-site target.^^Learn more about annotation use-site targets ^https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets^^^^
finally^kotlin^Begins a block that is always executed when a try block exits.^The <code>finally</code> block contains code that always executes, regardless of whether the<code> try</code> block completes successfully or throws an exception. With the <code>finally</code> block, you can clean up code after the execution of <code>try</code> and <code>catch</code> blocks. This is especially important when working with resources like files or network connections, as finally guarantees they are properly closed or released.^^^^^^
get^kotlin^Declares the getter of a property. Is used as an annotation use-site target.^^Learn more property getters and setters^https://kotlinlang.org/docs/properties.html#getters-and-setters^Learn more about annotation use-site targets^https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets^^
import^kotlin^Imports a declaration from another package into the current file.^A source file may start with a package declaration. All the contents, such as classes and functions, of the source file are included in this package. If the package is not specified, the contents of  the file belong to the <b>default</b> package with no name.^Learn more about packages and imports^https://kotlinlang.org/docs/packages.html#imports^^^^
init^kotlin^The primary constructor initializes a class instance and its properties in the class header. The class header can't contain any runnable code^To run code during object creation, use initializer blocks inside the class body. Initializer blocks are declared with the <code>init</code> keyword followed by curly braces. Write any code that you want to run within the curly braces.^Learn about constructors and initializer blocks^https://kotlinlang.org/docs/classes.html#constructors ^^^^
param^kotlin^Is used as an annotation use-site target (constructor parameter).^^Learn more about annotation  use-site targets^https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets^^^^
property^kotlin^Is used as an annotation use-site target.^Annotations with this target are not visible to Java.^Learn more about annotation  use-site targets^https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets^^^^
receiver^kotlin^Is used as an annotation use-site target.^Is the receiver parameter of an extension function or property^Learn more about annotation  use-site targets^https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets^^^^
set^kotlin^Is used as an annotation use-site target.^Serves as property setter^Learn more about annotation  use-site targets^https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets^^^^
setparam^kotlin^Is used as an annotation use-site target.^Serves as property setter parameter^Learn more about annotation  use-site targets^https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets^^^^
value^kotlin^With the <code>class</code> keyword, declares an inline class.^Inline classes are a subset of value-based classes. They don't have an identity and can only hold values.^Learn more about inline value classes^https://kotlinlang.org/docs/inline-classes.html^^^^
where^kotlin^Specifies constraints for a generic type parameter.^The passed type must satisfy all conditions of the where clause simultaneously.^Learn more about generic constraints^https://kotlinlang.org/docs/generics.html#generic-constraints^^^^
abstract^kotlin^Marks a class or member as abstract.^A class may be declared abstract, along with some or all of its members. An abstract member does not have an implementation in its class. You don't need to annotate abstract classes or functions with <code>open</code>.^Learn more about abstract classes^https://kotlinlang.org/docs/classes.html#abstract-classes^^^^
actual^kotlin^Denotes a platform-specific implementation in multiplatform projects.^Expected and actual declarations allow you to access platform-specific APIs from Kotlin Multiplatform modules. You can provide platform-agnostic APIs in the common code.^Learn more about expected and actual declarations^https://kotlinlang.org/docs/multiplatform-expect-actual.html^^^^
annotation^kotlin^Denotes a platform-specific implementation in multiplatform projects.^Annotations make it possible to attach metadata to code. To declare an annotation, put the annotation modifier in front of a class. ^Learn more about annotations^https://kotlinlang.org/docs/annotations.html^^^^
companion^kotlin^Companion objects allow you to define class-level functions and properties. This makes it easy to create factory methods, hold constants, and access shared utilities.^^Learn more about companion objects in declarations^https://kotlinlang.org/docs/object-declarations.html#companion-objects^^^^
const^kotlin^If the value of a read-only property is known at compile time, mark it as a compile time constant using the<code>const</const>modifier.^The property must fulfill the following requirements:<ul><li>It must be a top-level property, or a member of an object declaration or a companion object. <li>It must be initialized with a value of type String or a primitive type<li>It cannot be a custom getter.^Learn more about compile-time constants^https://kotlinlang.org/docs/properties.html#compile-time-constants^^^^
crossinline^kotlin^Forbids non-local returns in a lambda passed to an inline function.^Some inline functions may call the lambdas passed to them as parameters not directly from the function body but from another execution context like a local object or a nested function. In these cases, non-local control flow is also not allowed in the lambdas. To indicate that the lambda parameter of the inline function cannot use non-local returns, mark the lambda parameter with the <code>crossinline</code> modifier. ^Learn more about non-local returns^https://kotlinlang.org/docs/inline-functions.html#non-local-returns^^^^
data^kotlin^Instructs the compiler to generate canonical members for a class.^For each data class, the compiler automatically generates additional member functions that allow you to print an instance to readable output, compare instances, copy instances, and more. Data classes must fulfill these requirements:<ul><li> The primary constructor must have at least one parameter. <li>All primary constructor parameters must be marked as <code>val</code> or <code>var</code>.<li>Data classes can't be abstract, open, sealed, or inner.</ul>^Learn more about data classes^https://kotlinlang.org/docs/data-classes.html^^^^
enum^kotlin^The most basic use case for enum classes is the implementation of type-safe enum.^Enum constants can declare their own anonymous classes with their corresponding methods, as well as with overriding base methods. An enum class can implement an interface (but it cannot derive from a class), providing either a common implementation of interface members for all the entries, or separate implementations for each entry within its anonymous class.^Learn more about enum classes^https://kotlinlang.org/docs/enum-classes.html^^^^
expect^kotlin^Marks a property as a compile-time constant.^Expected and actual declarations allow you to access platform-specific APIs from Kotlin Multiplatform modules. You can provide platform-agnostic APIs in the common code.^Learn more about the language mechanism of expected and actual declarations^https://kotlinlang.org/docs/multiplatform-expect-actual.html^^^^
external^kotlin^Marks a declaration as implemented outside of Kotlin (accessible through JNI or in JavaScript. ^^Learn more about using JNI with Kotlin^https://kotlinlang.org/docs/java-interop.html#using-jni-with-kotlin^Learn more about using Javascript with Kotlin^https://kotlinlang.org/docs/js-interop.html#external-modifier^^
final^kotlin^Forbids non-local returns in a lambda passed to an inline function.^Kotlin requires explicit modifiers for overridable members and overrides. A member marked <code>override</code> is itself open, so it may be overridden in subclasses. If you want to prohibit re-overriding, use <code>final</code>.^Learn more about overriding methods^https://kotlinlang.org/docs/inheritance.html#overriding-methods^^^^
infix^kotlin^Allows calling a function using infix notation.^Functions marked with the infix keyword can be called using the infix notation. Infix functions must meet the following requirements:<ul><li>They must be member functions or extension functions. <li>They must have a single parameter. <li>The parameter must not accept a variable number of arguments and must have no default value.</ul>^Learn more about infix notation^https://kotlinlang.org/docs/functions.html#infix-notation^^^^
inline^kotlin^Instructs the compiler to generate canonical members for a class.^Using higher-order functions slows runtime. In many cases, you can eliminate the overhead of higher-order functions by inlining the lambda expressions.^Learn more about inline functions^https://kotlinlang.org/docs/inline-functions.html^^^^
inner^kotlin^Allows referring to an outer class instance from a nested class.^You can also use interfaces with nesting. All combinations of classes and interfaces are possible: You can nest interfaces in classes, classes in interfaces, and interfaces in interfaces.^Learn more about nested and inner classes^https://kotlinlang.org/docs/nested-classes.html#inner-classes^^^^
internal^kotlin^Marks a declaration as visible in the current module.^Kotlin includes four visibility modifiers: private, protected, internal, and public. The default visibility is public.^Learn about visibility modifiers^https://kotlinlang.org/docs/visibility-modifiers.html^^^^
lateinit^kotlin^Allows initializing a non-nullable property outside of a constructor.^The <code>lateinit</code> modifier lets you avoid null checks when referencing a property inside the body of a class. <br><br>This modifier can be used on <code>var</code> properties declared inside the body of a class (not in the primary constructor, and only when the property does not have a custom getter or setter), as well as for top-level properties and local variables. The type of the property or variable must be non-nullable and it must not be a primitive type. <br><br>Accessing a <code>lateinit</code> property before it has been initialized throws a special exception that identifies the property being accessed and the fact that it hasn't been initialized.^Learn more about late-initialized properties and variables^https://kotlinlang.org/docs/properties.html#late-initialized-properties-and-variables^^^^
noinline^kotlin^Turns off inlining of a lambda passed to an inline function.^If you don't want all of the lambdas passed to an inline function to be inlined, mark some of your function parameters with the <code>noinline</code>. Unlikee inlinable lambdas, noinline lambdas can be manipulated including being stored in fields or passed around.^Learn more about inline functions^https://kotlinlang.org/docs/inline-functions.html  ^^^^
open^kotlin^Allows subclassing a class or overriding a member.^By default, Kotlin classes are final – they can't be inherited. To make a class inheritable, mark it with the<code>open</code>keyword. ^Learn about abstract classes and inheritance^https://kotlinlang.org/docs/classes.html#abstract-classes^^^^
operator^kotlin^Marks a function as overloading an operator or implementing a convention.^Kotlin allows you to provide custom implementations for the predefined set of operators on types. These operators have predefined symbolic representation (like <code>+</code> or <code>*</code>) and precedence. <br><br>To implement an operator, provide a member function or an extension function with a specific name for the corresponding type. This type becomes the left-hand side type for binary operations and the argument type for the unary ones.<br><br> To overload an operator, mark the corresponding function with the <code>operator</code>modifier.^Learn about operator overloading^https://kotlinlang.org/docs/operator-overloading.html ^^^^
out^kotlin^Marks a type parameter as covariant.^With declaration-site variance, you can can annotate the type parameter <code>T</code> of <code>Source</code> to make sure that it is only returned (produced) from members of <code> Source<T></code>, and never consumed. To do this, use the <code>out</code> modifier. ^Learn more about variance^https://kotlinlang.org/docs/generics.html#variance^^^^
override^kotlin^Forbids overriding a member.^Kotlin requires explicit modifiers for overridable members and overrides. If there is no open modifier on a function, declaring a method with the same signature in a subclass is not allowed, either with override or without it. The<code>open</code> modifier has no effect when added to members of a final class (a class without an open modifier). <br><br>A member marked override is itself open, so it may be overridden in subclasses. If you want to prohibit re-overriding, use ><code>final</code>.^Learn about overriding methods^https://kotlinlang.org/docs/inheritance.html#overriding-methods^^^^
private^kotlin^If you mark a declaration as private, it will only be visible inside the file that contains the declaration.^^Learn more about visibility modifiers^https://kotlinlang.org/docs/visibility-modifiers.html^^^^
protected^kotlin^Allows calling a function using infix notation.^The protected modifier is not available for top-level declarations.^Learn more about visibility modifiers^https://kotlinlang.org/docs/visibility-modifiers.html^^^^
public^kotlin^Marks a declaration as visible anywhere.^If you don't use a visibility modifier, public is used by default, and your declarations will be visible everywhere.^Learn more about visibility modifiers^https://kotlinlang.org/docs/visibility-modifiers.html^^^^
reified^kotlin^Tells the compiler to inline a function and the lambdas passed to it at the call site.^Tells the compiler to inline a function and the lambdas passed to it at the call site.^Learn more about reified type parameters^https://kotlinlang.org/docs/inline-functions.html#reified-type-parameters^^^^
sealed^kotlin^Declares a sealed class (a class with restricted subclassing).^Sealed classes and interfaces provide controlled inheritance of your class hierarchies. All direct subclasses of a sealed class are known at compile time. No other subclasses may appear outside the module and package within which the sealed class is defined. Sealed classes are best used for scenarios when:<ul><li>Limited class inheritance is desired. For example, you have a predefined, finite set of subclasses that extend a class, all of which are known at compile time. <li>Type-safe design is required. If  safety and pattern matching are crucial in your project, sealed classes are particularly useful for state management or handling complex conditional logic<<li>Working with closed APIs. Sealed classes can support robust and maintainable public APIs and ensure that clients use the APIs as intended.</ul>^Learn more about sealed classes and interfaces^https://kotlinlang.org/docs/sealed-classes.html^^^^
suspend^kotlin^Marks a function or lambda as suspending (usable as a coroutine).^Kotlin's suspend function provides a safer abstraction for asynchronous operations.^Learn more about coroutines^https://kotlinlang.org/docs/coroutines-overview.html^^^^
tailrec^kotlin^Marks a function as tail-recursive (allowing the compiler to replace recursion with iteration).^For some algorithms that would normally use loops, using a recursive function reduces the risk of stack overflow. When a function is marked with the <code>tailrec</code> modifier and meets the required formal conditions, the compiler optimizes out the recursion and delivers a fast and efficient loop-based version instead.^Learn more about tail-recursive functions^https://kotlinlang.org/docs/functions.html#tail-recursive-functions^^^^
vararg^kotlin^Allows passing a variable number of arguments for a parameter.^You can mark a parameter of a function (usually the last one) with the <code>vararg</code> modifier. Only one parameter can be marked as <code>vararg</code>. If a <code>vararg</code> parameter is not last in the list, values for the subsequent parameters can be passed using named argument syntax, or, if the parameter has a function type, by passing a lambda outside the parentheses. ^Learn more about varargs^https://kotlinlang.org/docs/functions.html#variable-number-of-arguments-varargs^^^^
field^kotlin^Used inside a property accessor to refer to the backing field of the property.^In Kotlin, a field is only used as a part of a property to hold its value in memory. Fields cannot be declared directly. However, when a property needs a backing field, Kotlin provides it automatically. This backing field can be referenced in the accessors using the <code>field</code> identifier.^Learn more about backing fields in properties^https://kotlinlang.org/docs/properties.html#backing-fields^^^^
it^kotlin^Used inside a lambda to refer to its parameter implicitly.^It's common for a lambda expression to have only one parameter. If the compiler can parse the signature without any parameters, the parameter does not need to be declared and <code>-></code> can be omitted. The parameter will be implicitly declared under the name<code>it</code>. ^Learn more about the implicit name of a single parameter^https://kotlinlang.org/docs/lambdas.html#it-implicit-name-of-a-single-parameter^^^^
